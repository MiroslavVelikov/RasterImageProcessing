#include <iostream>
#include <vector>
#include "pbm.h"
#include "pgm.h"
#include <chrono>

#pragma warning(disable: 4996)

int main() {
	// PBM tests

	//std::vector<std::vector<bool>> matrix = 
	//{ 
	//	{0, 0, 0, 0, 1, 0},
	//	{0, 0, 0, 0, 1, 0},
	//	{0, 0, 0, 0, 1, 0},
	//	{0, 0, 0, 0, 1, 0},
	//	{0, 0, 0, 0, 1, 0},
	//	{0, 0, 0, 0, 1, 0},
	//	{1, 0, 0, 0, 1, 0},
	//	{0, 1, 1, 1, 0, 0},
	//	{0, 0, 0, 0, 0, 0},
	//	{0, 0, 0, 0, 0, 0},
	//};
	//PortableBitMap pbm("J", 10, 6, matrix);

	//std::vector<std::vector<bool>> matrix2 =
	//{
	//	{0, 0, 0, 0, 1, 0, 0},
	//	{0, 0, 0, 0, 1, 0, 0},
	//	{0, 0, 0, 0, 1, 0, 0},
	//	{0, 0, 0, 0, 1, 0, 0},
	//	{0, 0, 0, 0, 1, 0, 0},
	//	{0, 0, 0, 0, 1, 0, 0},
	//	{1, 0, 0, 0, 1, 0, 0},
	//	{0, 1, 1, 1, 0, 0, 0},
	//	{0, 0, 0, 0, 0, 0, 0},
	//	{0, 0, 0, 0, 0, 0, 0},
	//	{0, 0, 0, 0, 0, 0, 0},
	//};
	//PortableBitMap pbm2("J", 11, 7, matrix2);

	//pbm.rotateRight();
	//pbm2.rotateRight();
	//pbm2.flipLeft();

	//pbm.print();
	//std::cout << '\n';
	//pbm2.print();
	//std::cout << '\n';
	//PortableBitMap pbm3 = pbm+pbm2;
	//pbm3.print();
	//
	////pbm.crop(2, 2, 9, 9);
	////pbm.print();

	//===============================
	// PGM tests

		/*P2
		# Shows the word "FEEP" (example from Netpbm man page on PGM)
		24 7
		15
		0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
		0  3  3  3  3  0  0  7  7  7  7  0  0 11 11 11 11  0  0 15 15 15 15  0
		0  3  0  0  0  0  0  7  0  0  0  0  0 11  0  0  0  0  0 15  0  0 15  0
		0  3  3  3  0  0  0  7  7  7  0  0  0 11 11 11  0  0  0 15 15 15 15  0
		0  3  0  0  0  0  0  7  0  0  0  0  0 11  0  0  0  0  0 15  0  0  0  0
		0  3  0  0  0  0  0  7  7  7  7  0  0 11 11 11 11  0  0 15  0  0  0  0
		0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0*/

	std::vector<std::vector<size_t>> matrix =
	{
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 3, 3, 3, 3, 0, 0, 7, 7, 7, 7, 0, 0, 11, 11, 11, 11, 0, 0, 15, 15, 15, 15, 0},
		{0, 3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 15, 0, 0, 15, 0},
		{0, 3, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 11, 11, 11, 0, 0, 0, 15, 15, 15, 15, 0},
		{0, 3, 3, 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0},
		{0, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 11, 11, 11, 11, 0, 0, 15, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	};
	PortableGrayMap pgm("J", 7, 24, matrix, 15);
	pgm.rotateLeft();
	pgm.flipTop();
	PortableGrayMap pgm2 = pgm^pgm;
	pgm2.monochrome();
	std::cout << pgm2.getInfo();

	return 0;
}